[1]Express
[ Node JS 를 활용한 개발환경 서버구축 : Express ]

Express란 무엇인가?

[ Express ]
Express는 웹 및 모바일 애플리케이션을 위한 일련의 강력한 기능을 
제공하는 간결하고 유연한 Node.js 웹 애플리케이션 프레임워크이다. 
Node.js는 표준 웹서버 프레임워크로 불려질 만큼 많은 곳에서 사용하고 있다. 
 

[ Node.js와 Express는 무슨 관계인가? ] 

Node.js는 Chrome의 V8엔진을 이용하여 JavaScript로 브라우저가 아니라
 서버를 구축하고, 서버에서 JavaScript가 작동되도록 해주는 런타임 환경
 (플랫폼)이다. Express는 이런 Node.js의 원칙과 방법을 이용하여 웹
  애플리케이션을 만들기 위한 프레임워크다. 
 

간단하게 말하자면, 
Express란 Node.js를 사용하여 쉽게 서버를 구성할 수 있게 만든 
클래스와 라이브러리의 집합체임!!! 

 

[ 왜 Express 인가? ]

Express는 프레임워크이므로 웹 애플리케이션을 만들기 위한 각종 
라이브러리와 미들웨어 등이 내장되어 있어 개발하기 편하고, 수많은 
개발자들에게 개발 규칙을 강제하여 코드 및 구조의 통일성을 향상할 수 있다.

그것이 바로 프레임워크 도입의 가장 큰 장점이자 주된 사용이유이다. 

Express는 가장 많은 곳에서 보편적으로 사용되기 때문에 Express를 도입하면
구글링을 통해 충분한 래퍼런스들을 검색할 수 있다.

다른 프레임워크도 사용할 수 있는데 
Adonis.js, Koa, Sails.js와 같은 프레임워크가 있다.
(우리 보조교재(리액트를 다루는기술)에서 Koa프레임워크를 소개하고 있다!)
 
하지만 Express는 가장 유명하고 가장 널리 사용되기 때문에 
Express를 배워두는 것이 프레임워크를 배우는 데 있어서 가장 좋은 방법이다!


[ Express 설치 방법 ] 

터미널에서 내가 설치할 경로를 잡아두고 다음과 같이 입력 

npm install --save express

-> 간단히 : npm i express
(당연하지만 삭제는 uninstall 명령어를씀!-> npm uni express)
 

((참고))
설치옵션 명령어에 --save dev가 아니라 --save인 이유는 
프로덕션 의존성 때문이다.  

dev를 붙이지 않음으로 개발 중에만 사용하는 툴 뿐만 아니라 우리가 전달할 
애플리케이션의 한 부분으로 통합될 것이며, 따라서 이것도 반드시 애플리케이션을 
배포한 뒤 실행하게 될 모든 서버와 컴퓨터에 설치되어야 한다는 의미이다.

설치가 완료되면 package.json 파일에 의존성으로 추가된 것을 확인할 수 있다.

 

설치후 Express를 사용할 수 있으며, 
가장 간단하게 사용할 때는 다음과 같이 사용할 수 있다. 

 
*************************************
const http = require('http'); 
// require 파일을 불러오는 방법 
const express = require('express');
const app = express();

const server = http.createServer(app); 
// 서버를 생성할 때 꼭 필요한 메서드 

server.listen(3000);
// 연결포트지정
*************************************
[ 명령어 스크립트 정리 ]

1. 모듈 설치 명령어
(1) 익스프레스 설치
npm i express

2. 서버 구동하기 : node js에 작성 된 server.js파일 호출
node server

->>> 해당 서버주소로 사이트 연결 가능

3. 서버 멈추기 : Ctrl+C 바로 서버 멈춤

->>> 사이트 연결 안됨
----------------------------------------------------------------------------------
[2]Multer
[ Node JS 를 활용한 개발환경 서버구축 : Multer ]

Multer란 무엇인가?

[ Multer ]
multer는 Express를 위해 개발된 파일 처리 미들웨어이다. 
파일을 업로드받을 때 서버단 코드에서 처리할 것들을 
처리해 준는 서버 추가모듈이다!

(참고: 미들웨어는 서로 다른 애플리케이션이 
서로 통신하는 데 사용되는 소프트웨어다!)

 

[ 설치 ] 
npm i multer

[ 구조 ]
익스프레스는 자유도가 높은 프레임워크라 자유로운 응용도가 높다.
하지만 어느 정도는 표준적인 구조는 존재한다. 
아래는 프로젝트 파일 구조도를 예시한다.
****************
└project
 └constants
  └error.json

 └controllers
  └file.js

 └services
  └file.js

 └models
  └file.js

 └middlewares

 └routers
  └files.js
  └route.js

 └app.js
 **********

((세부설명))

constants 
- 각종 상수를 정의
각종 에러와 그에 대한 응답 코드와 메시지를 error,js에 작성

controllers - 컨트롤러를 작성
코드가 MVC 모델에 제대로 들어맞는다고 생각하지는 않지만, 
역할은 비슷하기에 흉내는 내 보았다. 컨트롤러에서는 핵심적인 로직을 구현한다. 나는 React를 쓰는 관계로 View는 없기 때문에 json으로 쏴준다.

services - 서비스를 작성
메일 작성이나 자주 재사용되는 인증 로직 같은 것들을 여기다가 구현

models - 모델(DB)다. 예컨데 MongoDB같은 것을 사용함

middewares - 미들웨어를 작성

routers - 라우터를 작성
_____________________________________

[ 사용법 ]
multer는 사전 세팅을 요구함
*****************************
import multer from 'multer';
const storage = multer.memoryStorage();
const upload = multer({ 
    storage, 
    limits: { 
        fileSize: 52428800
    } 
});

[ storage ]
storage 저장소(2가지옵션)
1. diskStorage 내부 저장소에 저장소
2. memoryStorage 메모리에 저장
-> memoryStorage를 사용하면 데이터 받고 다음 미들웨어로 데이터가 넘어감

[ multer ]
storage를 넘기고 upload 미들웨어를 정의

((limits옵션))

1. fieldNameSize   
  필드명 사이즈 최대값   (100 bytes)
2. fieldSize   
  필드값 사이즈 최대값   (1MB)
3. fields   
  파일형식이 아닌 필드의 최대 개수   (무제한)
4. fileSize   
  multipart 형식 폼에서 최대 파일 사이즈(bytes)   (무제한)
5. files   
  multipart 형식 폼에서 파일 필드의 최대 개수   (무제한)
6. parts   
  For multipart forms, the max number of parts (fields + files)   (무제한)
7. headerPairs   
  multipart 형식 폼에서 파싱할 헤더의 key=>value 쌍의 최대 개수   (2000)